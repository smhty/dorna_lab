{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/SplatBuffer.js","../src/Util.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/Constants.js","../src/worker/SortWorker.js","../src/Viewer.js","../src/worker/sorter.wasm"],"sourcesContent":["import * as THREE from 'three';\n\nconst tempVector3A = new THREE.Vector3();\nconst tempVector3B = new THREE.Vector3();\nconst tempVector4A = new THREE.Vector4();\nconst tempVector4B = new THREE.Vector4();\nconst tempQuaternion4A = new THREE.Quaternion();\nconst tempQuaternion4B = new THREE.Quaternion();\n\nlet fbf;\nlet tbf;\n\nexport class SplatBuffer {\n\n    static PositionComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerPosition: 12,\n            BytesPerScale: 12,\n            BytesPerColor: 4,\n            BytesPerRotation: 16,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerPosition: 6,\n            BytesPerScale: 6,\n            BytesPerColor: 4,\n            BytesPerRotation: 8,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n\n    static HeaderSizeBytes = 1024;\n\n    constructor(bufferData) {\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n        this.versionMajor = this.headerArrayUint8[0];\n        this.versionMinor = this.headerArrayUint8[1];\n        this.headerExtraK = this.headerArrayUint8[2];\n        this.compressionLevel = this.headerArrayUint8[3];\n        this.splatCount = this.headerArrayUint32[1];\n        this.bucketSize = this.headerArrayUint32[2];\n        this.bucketCount = this.headerArrayUint32[3];\n        this.bucketBlockSize = this.headerArrayFloat32[4];\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\n        this.bytesPerBucket = this.headerArrayUint32[5];\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\n\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\n\n        this.bytesPerPosition = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerPosition;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n\n        this.bytesPerSplat = this.bytesPerPosition + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\n\n        fbf = this.fbf.bind(this);\n        tbf = this.tbf.bind(this);\n\n        this.linkBufferArrays();\n\n        this.precomputedCovarianceBufferData = null;\n    }\n\n    linkBufferArrays() {\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\n        this.positionArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.PositionComponentCount);\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerPosition * this.splatCount,\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerPosition + this.bytesPerScale) * this.splatCount,\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\n        this.rotationArray = new FloatArray(this.splatBufferData,\n                                             (this.bytesPerPosition + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    tbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.toHalfFloat(f);\n        }\n    };\n\n    buildPreComputedBuffers() {\n        const splatCount = this.splatCount;\n\n        this.precomputedCovarianceBufferData = new ArrayBuffer(SplatBuffer.CovarianceSizeBytes * splatCount);\n        const covarianceArray = new Float32Array(this.precomputedCovarianceBufferData);\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\n                         fbf(this.rotationArray[rotationBase + 2]),\n                         fbf(this.rotationArray[rotationBase + 3]),\n                         fbf(this.rotationArray[rotationBase]));\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            const M = covarianceMatrix.elements;\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i] = M[0] * M[0] + M[3] * M[3] + M[6] * M[6];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 1] = M[0] * M[1] + M[3] * M[4] + M[6] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 2] = M[0] * M[2] + M[3] * M[5] + M[6] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 3] = M[1] * M[1] + M[4] * M[4] + M[7] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 4] = M[1] * M[2] + M[4] * M[5] + M[7] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 5] = M[2] * M[2] + M[5] * M[5] + M[8] * M[8];\n        }\n    }\n\n    getHeaderBufferData() {\n        return this.headerBufferData;\n    }\n\n    getSplatBufferData() {\n        return this.splatBufferData;\n    }\n\n    getPosition(index, outPosition = new THREE.Vector3()) {\n        let bucket = [0, 0, 0];\n        const positionBase = index * SplatBuffer.PositionComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            outPosition.x = (this.positionArray[positionBase] - sr) * sf + bucket[0];\n            outPosition.y = (this.positionArray[positionBase + 1] - sr) * sf + bucket[1];\n            outPosition.z = (this.positionArray[positionBase + 2] - sr) * sf + bucket[2];\n        } else {\n            outPosition.x = this.positionArray[positionBase];\n            outPosition.y = this.positionArray[positionBase + 1];\n            outPosition.z = this.positionArray[positionBase + 2];\n        }\n        return outPosition;\n    }\n\n    setPosition(index, position) {\n        let bucket = [0, 0, 0];\n        const positionBase = index * SplatBuffer.PositionComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = 1.0 / this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const maxR = sr * 2 + 1;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            this.positionArray[positionBase] = clamp(Math.round((position.x - bucket[0]) * sf) + sr, 0, maxR);\n            this.positionArray[positionBase + 1] = clamp(Math.round((position.y - bucket[1]) * sf) + sr, 0, maxR);\n            this.positionArray[positionBase + 2] = clamp(Math.round((position.z - bucket[2]) * sf) + sr, 0, maxR);\n        } else {\n            this.positionArray[positionBase] = position.x;\n            this.positionArray[positionBase + 1] = position.y;\n            this.positionArray[positionBase + 2] = position.z;\n        }\n    }\n\n    getScale(index, outScale = new THREE.Vector3()) {\n        const scaleBase = index * SplatBuffer.ScaleComponentCount;\n        outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n        return outScale;\n    }\n\n    setScale(index, scale) {\n        const scaleBase = index * SplatBuffer.ScaleComponentCount;\n        this.scaleArray[scaleBase] = tbf(scale.x);\n        this.scaleArray[scaleBase + 1] = tbf(scale.y);\n        this.scaleArray[scaleBase + 2] = tbf(scale.z);\n    }\n\n    getRotation(index, outRotation = new THREE.Quaternion()) {\n        const rotationBase = index * SplatBuffer.RotationComponentCount;\n        outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\n                        fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\n        return outRotation;\n    }\n\n    setRotation(index, rotation) {\n        const rotationBase = index * SplatBuffer.RotationComponentCount;\n        this.rotationArray[rotationBase] = tbf(rotation.w);\n        this.rotationArray[rotationBase + 1] = tbf(rotation.x);\n        this.rotationArray[rotationBase + 2] = tbf(rotation.y);\n        this.rotationArray[rotationBase + 3] = tbf(rotation.z);\n    }\n\n    getColor(index, outColor = new THREE.Vector4()) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\n        return outColor;\n    }\n\n    setColor(index, color) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        this.colorArray[colorBase] = color.x;\n        this.colorArray[colorBase + 1] = color.y;\n        this.colorArray[colorBase + 2] = color.z;\n        this.colorArray[colorBase + 3] = color.w;\n    }\n\n    getPrecomputedCovarianceBufferData() {\n        return this.precomputedCovarianceBufferData;\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    fillPositionArray(outPositionArray) {\n        const splatCount = this.splatCount;\n        let bucket = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const positionBase = i * SplatBuffer.PositionComponentCount;\n            if (this.compressionLevel > 0) {\n                const bucketIndex = Math.floor(i / this.bucketSize);\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n                const sf = this.compressionScaleFactor;\n                const sr = this.compressionScaleRange;\n                outPositionArray[positionBase] = (this.positionArray[positionBase] - sr) * sf + bucket[0];\n                outPositionArray[positionBase + 1] = (this.positionArray[positionBase + 1] - sr) * sf + bucket[1];\n                outPositionArray[positionBase + 2] = (this.positionArray[positionBase + 2] - sr) * sf + bucket[2];\n            } else {\n                outPositionArray[positionBase] = this.positionArray[positionBase];\n                outPositionArray[positionBase + 1] = this.positionArray[positionBase + 1];\n                outPositionArray[positionBase + 2] = this.positionArray[positionBase + 2];\n            }\n        }\n    }\n\n    fillScaleArray(outScaleArray) {\n        const fbf = this.fbf.bind(this);\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            outScaleArray[scaleBase] = fbf(this.scaleArray[scaleBase]);\n            outScaleArray[scaleBase + 1] = fbf(this.scaleArray[scaleBase + 1]);\n            outScaleArray[scaleBase + 2] = fbf(this.scaleArray[scaleBase + 2]);\n        }\n    }\n\n    fillRotationArray(outRotationArray) {\n        const fbf = this.fbf.bind(this);\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            outRotationArray[rotationBase] = fbf(this.rotationArray[rotationBase]);\n            outRotationArray[rotationBase + 1] = fbf(this.rotationArray[rotationBase + 1]);\n            outRotationArray[rotationBase + 2] = fbf(this.rotationArray[rotationBase + 2]);\n            outRotationArray[rotationBase + 3] = fbf(this.rotationArray[rotationBase + 3]);\n        }\n    }\n\n    fillColorArray(outColorArray) {\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const colorBase = i * SplatBuffer.ColorComponentCount;\n            outColorArray[colorBase] = this.colorArray[colorBase];\n            outColorArray[colorBase + 1] = this.colorArray[colorBase + 1];\n            outColorArray[colorBase + 2] = this.colorArray[colorBase + 2];\n            outColorArray[colorBase + 3] = this.colorArray[colorBase + 3];\n        }\n    }\n\n    swapVertices(indexA, indexB) {\n\n        this.getPosition(indexA, tempVector3A);\n        this.getPosition(indexB, tempVector3B);\n        this.setPosition(indexB, tempVector3A);\n        this.setPosition(indexA, tempVector3B);\n\n        this.getScale(indexA, tempVector3A);\n        this.getScale(indexB, tempVector3B);\n        this.setScale(indexB, tempVector3A);\n        this.setScale(indexA, tempVector3B);\n\n        this.getRotation(indexA, tempQuaternion4A);\n        this.getRotation(indexB, tempQuaternion4B);\n        this.setRotation(indexB, tempQuaternion4A);\n        this.setRotation(indexA, tempQuaternion4B);\n\n        this.getColor(indexA, tempVector4A);\n        this.getColor(indexB, tempVector4B);\n        this.setColor(indexB, tempVector4A);\n        this.setColor(indexA, tempVector4B);\n\n    }\n\n}\n","export const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress) {\n\n    return new Promise((resolve, reject) => {\n        fetch(path)\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (true) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk);\n                        }\n                        const buffer = new Blob(chunks).arrayBuffer();\n                        resolve(buffer);\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    chunks.push(chunk);\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk);\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    });\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { clamp } from './Util.js';\nimport * as THREE from 'three';\n\nconst SplatBufferBucketSize = 256;\nconst SplatBufferBucketBlockSize = 5.0;\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        while (true) {\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, 50);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += 50;\n            if (headerText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer(compressionLevel = 0, minimumAlpha = 1) {\n\n        const startTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const validVertexes = [];\n        // dummy vertex used for invalid vertexes\n        const vertexZero = {};\n        for (let propertyToRead of propertiesToRead) vertexZero[propertyToRead] = 0;\n        validVertexes.push(vertexZero);\n        for (let row = 0; row < splatCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            let alpha;\n            if (propertyTypes['opacity']) {\n                alpha = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n            } else {\n                alpha = 255;\n            }\n            if (alpha > minimumAlpha) {\n                const newVertex = {};\n                for (let propertyToRead of propertiesToRead) newVertex[propertyToRead] = rawVertex[propertyToRead];\n                validVertexes.push(newVertex);\n            }\n        }\n\n        console.log('Total valid splats: ', validVertexes.length, 'out of', splatCount);\n\n        const positionsForBucketCalcs = [];\n        for (let row = 0; row < validVertexes.length; row++) {\n            rawVertex = validVertexes[row];\n            positionsForBucketCalcs.push([rawVertex.x, rawVertex.y, rawVertex.z]);\n        }\n        const buckets = this.computeBuckets(positionsForBucketCalcs);\n\n        const paddedSplatCount = buckets.length * SplatBufferBucketSize;\n        const headerSize = SplatBuffer.HeaderSizeBytes;\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\n        header[3] = compressionLevel;\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\n\n        let bytesPerPosition = SplatBuffer.CompressionLevels[compressionLevel].BytesPerPosition;\n        let bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        let bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        let bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const positionBuffer = new ArrayBuffer(bytesPerPosition * paddedSplatCount);\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\n\n        const blockHalfSize = SplatBufferBucketBlockSize / 2.0;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n        const bucketCenter = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n        let outSplatIndex = 0;\n        for (let b = 0; b < buckets.length; b++) {\n            const bucket = buckets[b];\n            bucketCenter.fromArray(bucket.center);\n            for (let i = 0; i < bucket.splats.length; i++) {\n                let row = bucket.splats[i];\n                let invalidSplat = false;\n                if (row === 0) {\n                    invalidSplat = true;\n                }\n                rawVertex = validVertexes[row];\n\n                if (compressionLevel === 0) {\n                    const position = new Float32Array(positionBuffer, outSplatIndex * bytesPerPosition, 3);\n                    const scales = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    if (propertyTypes['scale_0']) {\n                        const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                        quat.normalize();\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\n                        scales.set([Math.exp(rawVertex.scale_0), Math.exp(rawVertex.scale_1), Math.exp(rawVertex.scale_2)]);\n                    } else {\n                        scales.set([0.01, 0.01, 0.01]);\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\n                    }\n                    position.set([rawVertex.x, rawVertex.y, rawVertex.z]);\n                } else {\n                    const position = new Uint16Array(positionBuffer, outSplatIndex * bytesPerPosition, 3);\n                    const scales = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n                    if (propertyTypes['scale_0']) {\n                        const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                        quat.normalize();\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\n                        scales.set([thf(Math.exp(rawVertex.scale_0)), thf(Math.exp(rawVertex.scale_1)), thf(Math.exp(rawVertex.scale_2))]);\n                    } else {\n                        scales.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        rot.set([thf(1.), 0, 0, 0]);\n                    }\n                    bucketCenterDelta.set(rawVertex.x, rawVertex.y, rawVertex.z).sub(bucketCenter);\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                    position.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                }\n\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\n                if (invalidSplat) {\n                    rgba[0] = 255;\n                    rgba[1] = 0;\n                    rgba[2] = 0;\n                    rgba[3] = 0;\n                } else {\n                    if (propertyTypes['f_dc_0']) {\n                        const SH_C0 = 0.28209479177387814;\n                        rgba.set([(0.5 + SH_C0 * rawVertex.f_dc_0) * 255,\n                                  (0.5 + SH_C0 * rawVertex.f_dc_1) * 255,\n                                  (0.5 + SH_C0 * rawVertex.f_dc_2) * 255]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (propertyTypes['opacity']) {\n                        rgba[3] = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n                    } else {\n                        rgba[3] = 255;\n                    }\n                }\n\n                outSplatIndex++;\n            }\n        }\n\n        const bytesPerBucket = 12;\n        const bucketsSize = bytesPerBucket * buckets.length;\n        const splatDataBufferSize = positionBuffer.byteLength + scaleBuffer.byteLength +\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\n\n        const headerArrayUint32 = new Uint32Array(header.buffer);\n        const headerArrayFloat32 = new Float32Array(header.buffer);\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\n        if (compressionLevel > 0) {\n            unifiedBufferSize += bucketsSize;\n            headerArrayUint32[2] = SplatBufferBucketSize;\n            headerArrayUint32[3] = buckets.length;\n            headerArrayFloat32[4] = SplatBufferBucketBlockSize;\n            headerArrayUint32[5] = bytesPerBucket;\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n        }\n\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\n        new Uint8Array(unifiedBuffer, headerSize, positionBuffer.byteLength).set(new Uint8Array(positionBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + positionBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + positionBuffer.byteLength + scaleBuffer.byteLength,\n                       colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + positionBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\n                       rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\n\n        if (compressionLevel > 0) {\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\n            for (let i = 0; i < buckets.length; i++) {\n                const bucket = buckets[i];\n                const base = i * 3;\n                bucketArray[base] = bucket.center[0];\n                bucketArray[base + 1] = bucket.center[1];\n                bucketArray[base + 2] = bucket.center[2];\n            }\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n\n        const endTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT complete!');\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n\n        return splatBuffer;\n    }\n\n    computeBuckets(positions) {\n        const blockSize = SplatBufferBucketBlockSize;\n        const halfBlockSize = blockSize / 2.0;\n        const splatCount = positions.length;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const position = positions[i];\n            if (i === 0 || position[0] < min.x) min.x = position[0];\n            if (i === 0 || position[0] > max.x) max.x = position[0];\n            if (i === 0 || position[1] < min.y) min.y = position[1];\n            if (i === 0 || position[1] > max.y) max.y = position[1];\n            if (i === 0 || position[2] < min.z) min.z = position[2];\n            if (i === 0 || position[2] > max.z) max.z = position[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const position = positions[i];\n            const xBlock = Math.ceil((position[0] - min.x) / blockSize);\n            const yBlock = Math.ceil((position[1] - min.y) / blockSize);\n            const zBlock = Math.ceil((position[2] - min.z) / blockSize);\n\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= SplatBufferBucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        // fill partially full buckets with invalid splats (splat 0)\n        // to get them up to SplatBufferBucketSize\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    while (bucket.splats.length < SplatBufferBucketSize) {\n                        bucket.splats.push(0);\n                    }\n                    fullBuckets.push(bucket);\n                }\n            }\n        }\n\n        return fullBuckets;\n    }\n}\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    fetchFile(fileName, onProgress) {\n        return new Promise((resolve, reject) => {\n            fetchWithProgress(fileName, onProgress)\n            .then((data) => {\n                resolve(data);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    loadFromURL(fileName, compressionLevel = 0, minimumAlpha = 1) {\n        return new Promise((resolve, reject) => {\n            const loadPromise = this.fetchFile(fileName);\n            loadPromise\n            .then((plyFileData) => {\n                const plyParser = new PlyParser(plyFileData);\n                const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha);\n                this.splatBuffer = splatBuffer;\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n}\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    loadFromURL(fileName, onProgress) {\n        return new Promise((resolve, reject) => {\n            fetchWithProgress(fileName, onProgress)\n            .then((bufferData) => {\n                const splatBuffer = new SplatBuffer(bufferData);\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    downloadFile(fileName) {\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message) {\n        this.message = message || 'Loading...';\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDiv = document.createElement('div');\n        this.messageDiv = document.createElement('div');\n        this.spinnerDivContainer.className = 'loaderContainer';\n        this.spinnerDiv.className = 'loader';\n        this.spinnerDivContainer.style.display = 'none';\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        document.body.appendChild(this.spinnerDivContainer);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width:180px;\n            }\n\n            .loaderContainer {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainer.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainer.style.display = 'none';\n    }\n\n    setMessage(msg) {\n        this.messageDiv.innerHTML = msg;\n    }\n}\n","import * as THREE from 'three';\n\nexport class SceneHelper {\n\n    constructor(scene, simpleScene) {\n        this.scene = scene;\n        this.simpleScene = simpleScene;\n        this.meshCursor = null;\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.simpleScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            this.meshCursor.children.forEach((child) => {\n                child.geometry.dispose();\n                child.material.dispose();\n            });\n            this.simpleScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.simpleScene.add(this.debugRoot);\n        this.simpleScene.add(this.secondaryDebugRoot);\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n    }\n\n    set(origin, normal, distance) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction) {\n        this.ray = new Ray(origin, direction);\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const localRay = new Ray();\n\n        return function(splatMesh, outHits = []) {\n            fromLocal.copy(splatMesh.matrixWorld);\n            toLocal.copy(fromLocal).invert();\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\n\n            const splatTree = splatMesh.getSplatTree();\n            if (splatTree.rootNode) {\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\n            }\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n            outHits.forEach((hit) => {\n                hit.origin.applyMatrix4(fromLocal);\n                hit.normal.transformDirection(fromLocal);\n            });\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n\n        // Used for raycasting against splat ellipsoid\n        /*\n        const origin = new THREE.Vector3();\n        const tempRotationMatrix = new THREE.Matrix4();\n        const tempScaleMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempMatrix3 = new THREE.Matrix3();\n        const tempRay = new Ray();\n        */\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatIndex = node.data.indexes[i];\n                    splatTree.splatBuffer.getPosition(splatIndex, tempPosition);\n                    splatTree.splatBuffer.getRotation(splatIndex, tempRotation);\n                    splatTree.splatBuffer.getScale(splatIndex, tempScale);\n\n                    // Simple approximated sphere intersection\n                    const radius = Math.max(Math.max(tempScale.x, tempScale.y), tempScale.z);\n                    if (ray.intersectSphere(tempPosition, radius, tempHit)) {\n                        outHits.push(tempHit.clone());\n                    }\n\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\n                    // as the approximated sphere approach\n                    /*\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\n                    tempMatrix.copy(tempScaleMatrix).premultiply(tempRotationMatrix).invert();\n                    tempMatrix3.setFromMatrix4(tempMatrix);\n                    tempRay.origin.copy(this.ray.origin).sub(tempPosition).applyMatrix4(tempMatrix);\n                    tempRay.direction.copy(this.ray.direction).transformDirection(tempMatrix).normalize();\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                        const hitClone = tempHit.clone();\n                        tempMatrix.invert();\n                        hitClone.origin.applyMatrix4(tempMatrix).add(tempPosition);\n                        outHits.push(hitClone);\n                    }\n                    */\n\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class SplatTreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTreeNode } from './SplatTreeNode.js';\n\nexport class SplatTree {\n\n    constructor(maxDepth, maxPositionsPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxPositionsPerNode = maxPositionsPerNode;\n        this.splatBuffer = null;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n    processSplatBuffer(splatBuffer, filterFunc = () => true) {\n        this.splatBuffer = splatBuffer;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n        const splatCount = splatBuffer.getSplatCount();\n\n        const position = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            if (filterFunc(i)) {\n                splatBuffer.getPosition(i, position);\n                if (i === 0 || position.x < this.sceneMin.x) this.sceneMin.x = position.x;\n                if (i === 0 || position.x > this.sceneMax.x) this.sceneMax.x = position.x;\n                if (i === 0 || position.y < this.sceneMin.y) this.sceneMin.y = position.y;\n                if (i === 0 || position.y > this.sceneMax.y) this.sceneMax.y = position.y;\n                if (i === 0 || position.z < this.sceneMin.z) this.sceneMin.z = position.z;\n                if (i === 0 || position.z > this.sceneMax.z) this.sceneMax.z = position.z;\n            }\n        }\n\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\n\n        const indexes = [];\n        for (let i = 0; i < splatCount; i ++) {\n            if (filterFunc(i)) {\n                indexes.push(i);\n            }\n        }\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\n        this.rootNode.data = {\n            'indexes': indexes\n        };\n        this.processNode(this.rootNode, splatBuffer);\n    }\n\n    processNode(node, splatBuffer) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < this.maxPositionsPerNode || node.depth > this.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!this.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    this.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            this.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const position = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const splatIndex = node.data.indexes[i];\n            splatBuffer.getPosition(splatIndex, position);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(position)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            this.processNode(child, splatBuffer);\n        }\n    }\n\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        return visitLeavesFromNode(this.rootNode, visitFunc);\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\n\nexport class SplatMesh extends THREE.Mesh {\n\n    static buildMesh(splatBuffer, splatAlphaRemovalThreshold = 1, halfPrecisionCovariancesOnGPU = false) {\n        const geometry = SplatMesh.buildGeomtery(splatBuffer);\n        const material = SplatMesh.buildMaterial();\n        return new SplatMesh(splatBuffer, geometry, material, splatAlphaRemovalThreshold, halfPrecisionCovariancesOnGPU);\n    }\n\n    constructor(splatBuffer, geometry, material, splatAlphaRemovalThreshold = 1, halfPrecisionCovariancesOnGPU = false) {\n        super(geometry, material);\n        this.splatBuffer = splatBuffer;\n        this.geometry = geometry;\n        this.material = material;\n        this.splatTree = null;\n        this.splatDataTextures = null;\n        this.splatAlphaRemovalThreshold = splatAlphaRemovalThreshold;\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        this.buildSplatTree();\n        this.resetLocalSplatDataAndTexturesFromSplatBuffer();\n    }\n\n    static buildMaterial() {\n\n        const vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float bounds = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clipCenter.w || clipCenter.x < -bounds || clipCenter.x > bounds\n                    || clipCenter.y < -bounds || clipCenter.y > bounds) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) / (viewCenter.z * viewCenter.z),\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) / (viewCenter.z * viewCenter.z),\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(modelViewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.0); // prevent negative eigen value\n\n                const float maxSplatSize = 512.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) / viewport * 2.0;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildGeomtery(splatBuffer) {\n\n        const splatCount = splatBuffer.getSplatCount();\n\n        const baseGeometry = new THREE.BufferGeometry();\n\n        const positionsArray = new Float32Array(6 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(2, -1.0, 1.0, 0.0);\n        positions.setXYZ(1, -1.0, -1.0, 0.0);\n        positions.setXYZ(0, 1.0, 1.0, 0.0);\n        positions.setXYZ(5, -1.0, -1.0, 0.0);\n        positions.setXYZ(4, 1.0, -1.0, 0.0);\n        positions.setXYZ(3, 1.0, 1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        const splatIndexArray = new Uint32Array(splatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = splatCount;\n\n        return geometry;\n    }\n\n    buildSplatTree() {\n\n        this.splatTree = new SplatTree(8, 5000);\n        console.time('SplatTree build');\n        const splatColor = new THREE.Vector4();\n        this.splatTree.processSplatBuffer(this.splatBuffer, (splatIndex) => {\n            this.splatBuffer.getColor(splatIndex, splatColor);\n            return splatColor.w > this.splatAlphaRemovalThreshold;\n        });\n        console.timeEnd('SplatTree build');\n\n        let leavesWithVertices = 0;\n        let avgSplatCount = 0;\n        let maxSplatCount = 0;\n        let nodeCount = 0;\n\n        this.splatTree.visitLeaves((node) => {\n            const nodeSplatCount = node.data.indexes.length;\n            if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n            }\n        });\n        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n        avgSplatCount = avgSplatCount / nodeCount;\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    resetLocalSplatDataAndTexturesFromSplatBuffer() {\n        this.updateLocalSplatDataFromSplatBuffer();\n        this.allocateAndStoreLocalSplatDataInTextures();\n    }\n\n    updateLocalSplatDataFromSplatBuffer() {\n        const splatCount = this.splatBuffer.getSplatCount();\n        this.covariances = new Float32Array(this.splatBuffer.getPrecomputedCovarianceBufferData());\n        this.colors = new Uint8Array(splatCount * 4);\n        this.centers = new Float32Array(splatCount * 3);\n        this.splatBuffer.fillPositionArray(this.centers);\n        this.splatBuffer.fillColorArray(this.colors);\n    }\n\n    allocateAndStoreLocalSplatDataInTextures() {\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n        const splatCount = this.splatBuffer.getSplatCount();\n\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\n            covariancesTextureSize.y *= 2;\n        }\n\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\n            centersColorsTextureSize.y *= 2;\n        }\n\n        let covariancesTexture;\n        let paddedCovariances;\n        if (this.halfPrecisionCovariancesOnGPU) {\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            for (let i = 0; i < this.covariances.length; i++) {\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(this.covariances[i]);\n            }\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\n        } else {\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(this.covariances);\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\n        }\n        covariancesTexture.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\n\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(this.colors[colorsBase], this.colors[colorsBase + 1],\n                                                                 this.colors[colorsBase + 2], this.colors[colorsBase + 3]);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(this.centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(this.centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(this.centers[centersBase + 2]);\n        }\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColorsTexture.internalFormat = 'RGBA32UI';\n        centersColorsTexture.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covariancesTexture,\n                'size': covariancesTextureSize\n            },\n            'centerColors': {\n                'data': paddedCenterColors,\n                'texture': centersColorsTexture,\n                'size': centersColorsTextureSize\n            }\n        };\n    }\n\n    updateSplatDataToDataTextures() {\n        this.updateLocalCovarianceDataToDataTexture();\n        this.updateLocalCenterColorDataToDataTexture();\n    }\n\n    updateLocalCovarianceDataToDataTexture() {\n        this.splatDataTextures.covariances.data.set(this.covariances);\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\n    }\n\n    updateLocalCenterColorDataToDataTexture() {\n        this.splatDataTextures.centerColors.data.set(this.centerColors);\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\n    }\n\n    updateIndexes(indexes, renderSplatCount) {\n        const geometry = this.geometry;\n\n        geometry.attributes.splatIndex.set(indexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    updateUniforms(renderDimensions, cameraFocalLength) {\n        const splatCount = this.splatBuffer.getSplatCount();\n        if (splatCount > 0) {\n            this.material.uniforms.viewport.value.set(renderDimensions.x, renderDimensions.y);\n            this.material.uniforms.focal.value.set(cameraFocalLength, cameraFocalLength);\n            this.material.uniformsNeedUpdate = true;\n        }\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return this.splatBuffer.getSplatCount();\n    }\n\n    getCenters() {\n        return this.centers;\n    }\n\n    getColors() {\n        return this.colors;\n    }\n\n    getCovariances() {\n        return this.covariances;\n    }\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let splatCount;\n    let indexesOffset;\n    let positionsOffset;\n    let viewProjOffset;\n    let indexesOutOffset;\n    let sortBuffersOffset;\n    let wasmMemory;\n    let positions;\n    let countsZero;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, viewProj, cameraPosition) {\n\n        // console.time('WASM SORT');\n        const sortStartTime = performance.now();\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        const viewProjArray = new Int32Array(wasmMemory, viewProjOffset, 16);\n        for (let i = 0; i < 16; i++) {\n            viewProjArray[i] = Math.round(viewProj[i] * 1000.0);\n        }\n        const frequencies = new Uint32Array(wasmMemory, sortBuffersOffset + splatCount * 4, Constants.DepthMapRange);\n        frequencies.set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesOffset, positionsOffset, sortBuffersOffset, viewProjOffset,\n                                         indexesOutOffset, cameraPosition[0], cameraPosition[1],\n                                         cameraPosition[2], Constants.DepthMapRange, splatSortCount, splatRenderCount, splatCount);\n        const sortEndTime = performance.now();\n        // console.timeEnd('WASM SORT');\n\n        self.postMessage({\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': sortEndTime - sortStartTime\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.positions) {\n            positions = e.data.positions;\n            const floatPositions = new Float32Array(positions);\n            const intPositions = new Int32Array(splatCount * 3);\n            for (let i = 0; i < splatCount * 3; i++) {\n                intPositions[i] = Math.round(floatPositions[i] * 1000.0);\n            }\n            new Int32Array(wasmMemory, positionsOffset, splatCount * 3).set(intPositions);\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            sort(sortCount, renderCount, e.data.sort.view, e.data.sort.cameraPosition, e.data.sort.inIndexBuffer);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n\n            const INDEXES_BYTES_PER_ENTRY = Constants.BytesPerInt;\n            const POSITIONS_BYTES_PER_ENTRY = Constants.BytesPerFloat * 3;\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n            const memoryBytesPerVertex = INDEXES_BYTES_PER_ENTRY + POSITIONS_BYTES_PER_ENTRY;\n            const memoryRequiredForVertices = splatCount * memoryBytesPerVertex;\n            const memoryRequiredForSortBuffers = splatCount * Constants.BytesPerInt * 2 +\n                                                 Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const extraMemory = Constants.MemoryPageSize * 32;\n            const totalRequiredMemory = memoryRequiredForVertices + memoryRequiredForSortBuffers + extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 3,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesOffset = 0;\n                positionsOffset = splatCount * INDEXES_BYTES_PER_ENTRY;\n                viewProjOffset = positionsOffset + splatCount * POSITIONS_BYTES_PER_ENTRY;\n                sortBuffersOffset = viewProjOffset + 16 * Constants.BytesPerFloat;\n                indexesOutOffset = sortBuffersOffset + splatCount * Constants.BytesPerInt +\n                                   Constants.DepthMapRange * Constants.BytesPerInt * 2;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                self.postMessage({\n                    'sortSetupPhase1Complete': true,\n                    'inIndexBuffer': wasmMemory,\n                    'inIndexOffset': 0,\n                    'outIndexBuffer': wasmMemory,\n                    'outIndexOffset': indexesOutOffset\n                });\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize\n            }\n        }\n    });\n    return worker;\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\n\nconst THREE_CAMERA_FOV = 60;\n\nexport class Viewer {\n\n    constructor(params = {}) {\n\n        if (!params.cameraUp) params.cameraUp = [0, 1, 0];\n        if (!params.initialCameraPosition) params.initialCameraPosition = [0, 10, 15];\n        if (!params.initialCameraLookAt) params.initialCameraLookAt = [0, 0, 0];\n        if (params.selfDrivenMode === undefined) params.selfDrivenMode = true;\n        if (params.useBuiltInControls === undefined) params.useBuiltInControls = true;\n\n        this.rootElement = params.rootElement;\n        this.usingExternalCamera = params.camera ? true : false;\n        this.usingExternalRenderer = params.renderer ? true : false;\n\n        this.cameraUp = new THREE.Vector3().fromArray(params.cameraUp);\n        this.initialCameraPosition = new THREE.Vector3().fromArray(params.initialCameraPosition);\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(params.initialCameraLookAt);\n\n        this.scene = params.scene;\n        this.simpleScene = params.simpleScene;\n        this.renderer = params.renderer;\n        this.camera = params.camera;\n        this.useBuiltInControls = params.useBuiltInControls;\n        this.controls = null;\n        this.selfDrivenMode = params.selfDrivenMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n        this.showMeshCursor = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.splatRenderCount = 0;\n        this.splatSortCount = 0;\n\n        this.inIndexArray = null;\n\n        this.splatMesh = null;\n\n        this.sortRunning = false;\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n        this.infoPanelCells = {};\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n        window.addEventListener('mousemove', this.onMouseMove.bind(this));\n        window.addEventListener('mousedown', this.onMouseDown.bind(this));\n        window.addEventListener('mouseup', this.onMouseUp.bind(this));\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\n    }\n\n    onKeyDown(e) {\n        switch (e.code) {\n            case 'KeyC':\n                this.showMeshCursor = !this.showMeshCursor;\n            break;\n            case 'KeyI':\n                this.showInfo = !this.showInfo;\n                if (this.showInfo) {\n                    this.infoPanel.style.display = 'block';\n                } else {\n                    this.infoPanel.style.display = 'none';\n                }\n            break;\n        }\n    }\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const clickOffset = new THREE.Vector2();\n        const outHits = [];\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (!this.transitioningCameraTarget && wasClick) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.previousCameraTarget.copy(this.controls.target);\n                    this.nextCameraTarget.copy(outHits[0].origin);\n                    this.transitioningCameraTarget = true;\n                    this.transitioningCameraTargetStartTime = getCurrentTime();\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    init() {\n\n        this.setupInfoPanel();\n\n        if (!this.rootElement && !this.usingExternalRenderer) {\n            this.rootElement = document.createElement('div');\n            this.rootElement.style.width = '100%';\n            this.rootElement.style.height = '100%';\n            document.body.appendChild(this.rootElement);\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        this.scene = this.scene || new THREE.Scene();\n        this.simpleScene = this.simpleScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.scene, this.simpleScene);\n        this.sceneHelper.setupMeshCursor();\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(0.0, 0.0, 0.0, 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        }\n        this.setupRenderTargetCopyObjects();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.rotateSpeed = 0.3;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n        }\n\n        if (!this.usingExternalRenderer) {\n            const resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        this.setupSimpleObjectDepthOverrideMaterial();\n\n    }\n\n    setupInfoPanel() {\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.style.position = 'absolute';\n        this.infoPanel.style.padding = '10px';\n        this.infoPanel.style.backgroundColor = '#cccccc';\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\n        this.infoPanel.style.zIndex = 100;\n        this.infoPanel.style.width = '375px';\n        this.infoPanel.style.fontFamily = 'arial';\n        this.infoPanel.style.fontSize = '10pt';\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.style.width = '110px';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanel.style.display = 'none';\n        document.body.appendChild(this.infoPanel);\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    setupSimpleObjectDepthOverrideMaterial() {\n        this.simpleObjectDepthOverrideMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                #include <common>\n                void main() {\n                    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);   \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                void main() {\n                    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n              }\n            `,\n            depthWrite: true,\n            depthTest: true,\n            transparent: false\n        });\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    updateSplatMeshUniforms = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLength);\n            }\n        };\n\n    }();\n\n    loadFile(fileURL, options = {}) {\n        if (options.position) options.position = new THREE.Vector3().fromArray(options.position);\n        if (options.orientation) options.orientation = new THREE.Quaternion().fromArray(options.orientation);\n        options.splatAlphaRemovalThreshold = options.splatAlphaRemovalThreshold || 1;\n        options.halfPrecisionCovariancesOnGPU = !!options.halfPrecisionCovariancesOnGPU;\n        const loadingSpinner = new LoadingSpinner();\n        loadingSpinner.show();\n        const loadingProgress = (percent, percentLabel) => {\n            if (percent == 100) {\n                loadingSpinner.setMessage(`Download complete!`);\n            } else {\n                if (percentLabel) {\n                    loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                } else {\n                    loadingSpinner.setMessage(`Downloading...`);\n                }\n            }\n        };\n        return new Promise((resolve, reject) => {\n            let fileLoadPromise;\n            if (fileURL.endsWith('.splat')) {\n                fileLoadPromise = new SplatLoader().loadFromURL(fileURL, loadingProgress);\n            } else if (fileURL.endsWith('.ply')) {\n                fileLoadPromise = new PlyLoader().loadFromURL(fileURL, loadingProgress);\n            } else {\n                reject(new Error(`Viewer::loadFile -> File format not supported: ${fileURL}`));\n            }\n            fileLoadPromise\n            .then((splatBuffer) => {\n                loadingSpinner.setMessage(`Processing splats...`);\n                window.setTimeout(() => {\n                    this.setupSplatMesh(splatBuffer, options.splatAlphaRemovalThreshold, options.position,\n                                        options.orientation, options.halfPrecisionCovariancesOnGPU);\n                    this.setupSortWorker(splatBuffer).then(() => {\n                        loadingSpinner.hide();\n                        resolve();\n                    });\n                }, 1);\n            })\n            .catch((e) => {\n                reject(new Error(`Viewer::loadFile -> Could not load file ${fileURL}`));\n            });\n        });\n    }\n\n    setupSplatMesh(splatBuffer, splatAlphaRemovalThreshold = 1, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                   halfPrecisionCovariancesOnGPU = false) {\n        const splatCount = splatBuffer.getSplatCount();\n        console.log(`Splat count: ${splatCount}`);\n\n        splatBuffer.buildPreComputedBuffers();\n        this.splatMesh = SplatMesh.buildMesh(splatBuffer, splatAlphaRemovalThreshold, halfPrecisionCovariancesOnGPU);\n        this.splatMesh.position.copy(position);\n        this.splatMesh.quaternion.copy(quaternion);\n        this.splatMesh.frustumCulled = false;\n        this.splatMesh.renderOrder = 10;\n        this.updateSplatMeshUniforms();\n\n        this.splatRenderCount = splatCount;\n    }\n\n    setupSortWorker(splatBuffer) {\n        return new Promise((resolve) => {\n            const splatCount = splatBuffer.getSplatCount();\n            this.sortWorker = createSortWorker(splatCount);\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    this.splatMesh.updateIndexes(this.outIndexArray, e.data.splatRenderCount);\n                    this.lastSortTime = e.data.sortTime;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    this.sortWorker.postMessage({\n                        'positions': this.splatMesh.getCenters().buffer\n                    });\n                    this.outIndexArray = new Uint32Array(e.data.outIndexBuffer, e.data.outIndexOffset, splatBuffer.getSplatCount());\n                    this.inIndexArray = new Uint32Array(e.data.inIndexBuffer, e.data.inIndexOffset, splatBuffer.getSplatCount());\n                    for (let i = 0; i < splatCount; i++) this.inIndexArray[i] = i;\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    this.splatMesh.updateIndexes(this.outIndexArray, splatBuffer.getSplatCount());\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    this.updateView(true, true);\n                    this.splatRenderingInitialized = true;\n                    resolve();\n                }\n            };\n        });\n    }\n\n    gatherSceneNodes = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const tempMatrix4 = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToSort = 125;\n        const MaximumDistanceToRender = 150;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / this.cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / this.cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\n\n            const splatTree = this.splatMesh.getSplatTree();\n            let nodeRenderCount = 0;\n            let splatRenderCount = 0;\n            const nodeCount = splatTree.nodesWithIndexes.length;\n            for (let i = 0; i < nodeCount; i++) {\n                const node = splatTree.nodesWithIndexes[i];\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\n                const distanceToNode = tempVector.length();\n                tempVector.normalize();\n\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                const ns = nodeSize(node);\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .5);\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .5);\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                    continue;\n                }\n                splatRenderCount += node.data.indexes.length;\n                nodeRenderList[nodeRenderCount] = node;\n                node.data.distanceToNode = distanceToNode;\n                nodeRenderCount++;\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode > b.data.distanceToNode) return 1;\n                else return -1;\n            });\n\n            this.splatRenderCount = splatRenderCount;\n            this.splatSortCount = 0;\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const shouldSort = node.data.distanceToNode <= MaximumDistanceToSort;\n                if (shouldSort) {\n                    this.splatSortCount += node.data.indexes.length;\n                }\n                const windowSizeInts = node.data.indexes.length;\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                let destView = new Uint32Array(this.inIndexArray.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset -= windowSizeBytes;\n            }\n\n        };\n\n    }();\n\n    start() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                if (this.splatRenderingInitialized) {\n                    this.updateSplatMeshUniforms();\n                    this.updateSplatRenderTargetForRenderDimensions(currentRendererSize.x, currentRendererSize.y);\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    update() {\n        if (this.controls) {\n            this.controls.update();\n        }\n        this.updateView();\n        this.updateForRendererSizeChanges();\n\n        this.rayCastScene();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfo();\n    }\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n        let tempCameraTarget = new THREE.Vector3();\n\n        return function() {\n\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n\n            if (this.transitioningCameraTarget) {\n                const t = (currentTime - this.transitioningCameraTargetStartTime) / 0.25;\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n\n            lastUpdateTime = currentTime;\n\n        };\n\n    }();\n\n    rayCastScene = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfo = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showInfo) {\n                const splatCount = this.splatMesh.getSplatCount();\n                this.getRenderDimensions(renderDimensions);\n\n                const cameraPos = this.camera.position;\n                const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\n\n                const cameraLookAt = this.controls.target;\n                const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\n\n                if (this.showMeshCursor) {\n                    const cursorPos = this.sceneHelper.meshCursor.position;\n                    const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\n                    this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\n                } else {\n                    this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\n                }\n\n                this.infoPanelCells.fps.innerHTML = this.currentFPS;\n                this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n                const renderPct = this.splatRenderCount / splatCount * 100;\n                this.infoPanelCells.renderSplatCount.innerHTML =\n                    `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\n\n                this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\n            }\n        };\n\n    }();\n\n    render() {\n\n        const sceneHasRenderables = (scene) => {\n            for (let child of scene.children) {\n                if (child.visible) {\n                   return true;\n                }\n            }\n            return false;\n        };\n\n        let defualtSceneHasRenderables = sceneHasRenderables(this.scene);\n        let simpleSceneHasRenderables = sceneHasRenderables(this.simpleScene);\n\n        if (defualtSceneHasRenderables || simpleSceneHasRenderables) {\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (defualtSceneHasRenderables) this.renderer.render(this.scene, this.camera);\n            if (simpleSceneHasRenderables) this.renderer.render(this.simpleScene, this.camera);\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        } else {\n            this.renderer.render(this.splatMesh, this.camera);\n        }\n    }\n\n    updateView = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n\n        return function(force = false, gatherAllNodes = false) {\n            if (!force) {\n                sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n                let needsRefreshForRotation = false;\n                let needsRefreshForPosition = false;\n                if (sortViewDir.dot(lastSortViewDir) <= 0.95) needsRefreshForRotation = true;\n                if (sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length() >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            tempMatrix.copy(this.camera.matrixWorld).invert();\n            tempMatrix.premultiply(this.camera.projectionMatrix);\n            tempMatrix.multiply(this.splatMesh.matrixWorld);\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            if (!this.sortRunning) {\n                this.gatherSceneNodes(gatherAllNodes);\n                this.sortRunning = true;\n                this.sortWorker.postMessage({\n                    sort: {\n                        'view': tempMatrix.elements,\n                        'cameraPosition': cameraPositionArray,\n                        'splatRenderCount': this.splatRenderCount,\n                        'splatSortCount': this.splatSortCount,\n                        'inIndexBuffer': this.inIndexArray.buffer\n                    }\n                });\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f}}}\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0004\u0001\u0005\u0002@ \n \tk\"\u000e \nI\"\u0010\u0004@A����\u0007!\fA����x!\u000f \u000e!\r\u0003@ \u0002 \rA\u0002t\"\tj \u0001 \u0000 \tj(\u0002\u0000A\flj\"\t(\u0002\u0004 \u0003(\u0002\u0018l \t(\u0002\u0000 \u0003(\u0002\blj \t(\u0002\b \u0003(\u0002(lj\"\t6\u0002\u0000 \t \f \t \fH\u001b!\f \t \u000f \t \u000fJ\u001b!\u000f \rA\u0001j\"\r \nG\r\u0000\u000b \u0002 \u000bA\u0002tj!\r \b� \u000f� \f���!\u0005 \u0010E\r\u0001 \u000e!\t\u0003@ \r\u0002 \u0005 \u0002 \tA\u0002tj(\u0002\u0000 \fk��\"\u0006�C\u0000\u0000\u0000O]\u0004@ \u0006�\f\u0001\u000bA����x\u000bA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \tA\u0001j\"\t \nG\r\u0000\u000b\f\u0001\u000b \u0002 \u000bA\u0002tj!\r \b�C\u0000\u0000���!\u0005A����\u0007!\f\u000b \bA\u0002O\u0004@ \r(\u0002\u0000!\u0003A\u0001!\t\u0003@ \u0002 \t \u000bjA\u0002tj\"\u0001 \u0001(\u0002\u0000 \u0003j\"\u00036\u0002\u0000 \tA\u0001j\"\t \bG\r\u0000\u000b\u000b \u000eA\u0000J\u0004@ \u000e!\t\u0003@ \u0004 \tA\u0001k\"\u0001A\u0002t\"\u0003j \u0000 \u0003j(\u0002\u00006\u0002\u0000 \tA\u0001J!\u0003 \u0001!\t \u0003\r\u0000\u000b\u000b \u000e \nA\u0001k\"\u0001L\u0004@ \u0001!\t\u0003@ \u0004 \u0001 \u0002\u0002 \u0005 \u0002 \tA\u0002t\"\u0003j(\u0002\u0000 \fk��\"\u0006�C\u0000\u0000\u0000O]\u0004@ \u0006�\f\u0001\u000bA����x\u000b \u000bjA\u0002tj\"\b(\u0002\u0000A\u0001k\"\nkA\u0002tj \u0000 \u0003j(\u0002\u00006\u0002\u0000 \b \n6\u0002\u0000 \t \u000eJ!\u0003 \tA\u0001k!\t \u0003\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b"],"names":["tempVector3A","THREE","Vector3","tempVector3B","tempVector4A","Vector4","tempVector4B","tempQuaternion4A","Quaternion","tempQuaternion4B","fbf","tbf","SplatBuffer","static","BytesPerPosition","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","Float32Array","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerPosition","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","bind","linkBufferArrays","precomputedCovarianceBufferData","FloatArray","Uint16Array","positionArray","PositionComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","f","DataUtils","fromHalfFloat","toHalfFloat","buildPreComputedBuffers","CovarianceSizeBytes","covarianceArray","scale","rotation","rotationMatrix","Matrix3","scaleMatrix","covarianceMatrix","tempMatrix4","Matrix4","i","scaleBase","makeScale","x","y","z","setFromMatrix4","rotationBase","makeRotationFromQuaternion","copy","multiply","M","elements","CovarianceSizeFloats","getHeaderBufferData","getSplatBufferData","getPosition","index","outPosition","bucket","positionBase","sf","sr","bucketIndex","Math","floor","setPosition","position","maxR","clamp","round","getScale","outScale","setScale","getRotation","outRotation","setRotation","w","getColor","outColor","colorBase","setColor","color","getPrecomputedCovarianceBufferData","getSplatCount","fillPositionArray","outPositionArray","fillScaleArray","outScaleArray","fillRotationArray","outRotationArray","fillColorArray","outColorArray","swapVertices","indexA","indexB","floatView","int32View","Int32Array","buffer","uintEncodedFloat","fetchWithProgress","path","onProgress","Promise","resolve","reject","fetch","then","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","error","val","min","max","getCurrentTime","performance","now","SplatBufferBucketSize","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","headerChunk","decode","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","minimumAlpha","startTime","console","log","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","hasOwnProperty","type","validVertexes","vertexZero","propertyToRead","row","alpha","exp","opacity","newVertex","positionsForBucketCalcs","buckets","computeBuckets","paddedSplatCount","headerSize","header","positionBuffer","scaleBuffer","colorBuffer","rotationBuffer","SplatBufferBucketBlockSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","b","fromArray","center","splats","invalidSplat","scales","rot","quat","rot_1","rot_2","rot_3","rot_0","normalize","scale_0","scale_1","scale_2","thf","sub","rgba","Uint8ClampedArray","SH_C0","f_dc_0","f_dc_1","f_dc_2","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","splatBuffer","endTime","positions","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","blockSize","bucketId","toArray","PlyLoader","fetchFile","fileName","catch","err","loadFromURL","plyFileData","SplatLoader","downLoadLink","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","dispose","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","spinnerDivContainer","spinnerDiv","messageDiv","className","display","innerHTML","getElementsByTagName","show","hide","setMessage","msg","SceneHelper","scene","simpleScene","meshCursor","setupMeshCursor","coneGeometry","ConeGeometry","coneMaterial","MeshBasicMaterial","downArrow","Mesh","upArrow","leftArrow","rightArrow","Object3D","visible","destroyMeshCursor","children","forEach","child","geometry","material","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","addDebugMeshes","debugRoot","createDebugMeshes","secondaryDebugRoot","createSecondaryDebugMeshes","renderOrder","sphereGeometry","SphereGeometry","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","uniforms","Color","ShaderMaterial","vertexShader","fragmentShader","transparent","depthTest","depthWrite","side","FrontSide","extensions","fragDepth","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","hitClone","Raycaster","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","matrixWorld","Error","near","far","intersectSplatMesh","toLocal","fromLocal","localRay","splatMesh","outHits","applyMatrix4","splatTree","getSplatTree","rootNode","castRayAtSplatTreeNode","sort","a","hit","tempPosition","tempScale","tempRotation","tempHit","node","boundingBox","indexes","splatIndex","idGen","SplatTreeNode","depth","id","Box3","SplatTree","maxDepth","maxPositionsPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","processSplatBuffer","filterFunc","processNode","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","SplatMesh","buildMesh","splatAlphaRemovalThreshold","halfPrecisionCovariancesOnGPU","buildGeomtery","buildMaterial","splatDataTextures","buildSplatTree","resetLocalSplatDataAndTexturesFromSplatBuffer","covariancesTexture","centersColorsTexture","focal","viewport","debugColor","covariancesTextureSize","centersColorsTextureSize","alphaTest","blending","NormalBlending","DoubleSide","baseGeometry","BufferGeometry","positionsArray","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","time","splatColor","timeEnd","leavesWithVertices","avgSplatCount","maxSplatCount","nodeCount","nodeSplatCount","updateLocalSplatDataFromSplatBuffer","allocateAndStoreLocalSplatDataInTextures","covariances","colors","centers","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","r","g","RGBAIntegerFormat","UnsignedIntType","internalFormat","uniformsNeedUpdate","texture","size","centerColors","updateSplatDataToDataTextures","updateLocalCovarianceDataToDataTexture","updateLocalCenterColorDataToDataTexture","updateIndexes","renderSplatCount","attributes","updateUniforms","renderDimensions","cameraFocalLength","getSplatDataTextures","getCenters","getColors","getCovariances","Constants","sortWorker","self","wasmInstance","indexesOffset","positionsOffset","viewProjOffset","indexesOutOffset","sortBuffersOffset","wasmMemory","countsZero","onmessage","e","floatPositions","intPositions","postMessage","sortSetupComplete","renderCount","splatRenderCount","splatSortCount","viewProj","cameraPosition","sortStartTime","DepthMapRange","viewProjArray","exports","sortIndexes","sortEndTime","sortDone","sortTime","view","inIndexBuffer","init","INDEXES_BYTES_PER_ENTRY","BytesPerInt","POSITIONS_BYTES_PER_ENTRY","BytesPerFloat","sorterWasmBytes","totalRequiredMemory","MemoryPageSize","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","inIndexOffset","outIndexBuffer","outIndexOffset","params","cameraUp","initialCameraPosition","initialCameraLookAt","selfDrivenMode","useBuiltInControls","rootElement","usingExternalCamera","usingExternalRenderer","renderer","controls","selfDrivenUpdateFunc","selfDrivenUpdate","showMeshCursor","showInfo","sceneHelper","inIndexArray","sortRunning","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","window","onMouseUp","offsetX","offsetY","clickOffset","wasClick","transitioningCameraTarget","getRenderDimensions","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","setupInfoPanel","PerspectiveCamera","Scene","WebGLRenderer","antialias","precision","autoClear","setClearColor","setSize","setupRenderTargetCopyObjects","ResizeObserver","observe","setupSimpleObjectDepthOverrideMaterial","padding","backgroundColor","border","zIndex","fontFamily","fontSize","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","updateSplatRenderTargetForRenderDimensions","splatRenderTarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","simpleObjectDepthOverrideMaterial","renderTargetCopyMaterial","sourceColorTexture","sourceDepthTexture","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","renderTargetCopyQuad","PlaneGeometry","renderTargetCopyCamera","OrthographicCamera","updateSplatMeshUniforms","loadFile","fileURL","options","orientation","loadingSpinner","loadingProgress","fileLoadPromise","endsWith","setTimeout","setupSplatMesh","setupSortWorker","frustumCulled","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","outIndexArray","sortCanceled","updateView","gatherSceneNodes","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","forward","tempMax","nodeSize","gatherAllNodes","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","start","requestAnimationFrame","updateFPS","lastCalcTime","frameCount","currentTime","updateForRendererSizeChanges","lastRendererSize","currentRendererSize","aspect","render","rayCastScene","timingSensitiveUpdates","updateInfo","lastUpdateTime","tempCameraTarget","lerp","cameraPos","cameraPosString","cameraLookAt","cameraLookAtString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","sceneHasRenderables","defualtSceneHasRenderables","simpleSceneHasRenderables","savedAuoClear","tempMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","force","needsRefreshForRotation","needsRefreshForPosition","premultiply","projectionMatrix","getSplatMesh"],"mappings":"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"}